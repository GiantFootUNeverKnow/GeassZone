#include <iostream>
#include <algorithm>
#include <vector>
#include <stdio.h>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <stack>
#include <queue>
#include <list>
#include <iomanip>
#include <cmath>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <string>
#include <utility>
#include <functional>

using namespace std;

typedef long long int LLI;
typedef vector<int> VI;
typedef vector<vector<int> > VVI;
typedef pair<int, int> PII;
typedef vector<pair<int, int> > VPI;
typedef vector<double> VD;
typedef vector<vector<double> > VVD;
typedef list<int> LI;

const int EPIS = 1e-7;
const int INF = 2000000000;

const int base = 100000;
LLI dp1[base];
LLI dp2[10001];

int digit_sum(long long int x){
    int sum = 0;
    while (x){
        int d = x % 10;
        sum += d;
        x /= 10;
    }
    return sum;
}

void init(){
    dp1[0] = 0;
    for (int i = 1; i < base; i++){
        dp1[i] = dp1[i-1] + digit_sum(i);
    }
    dp2[0] = dp1[base-1];
    for (int i = 1; i < 10001; i++){
        dp2[i] = dp2[i-1] + base * digit_sum(i) + dp2[0];
    }
}

LLI calc_dp(LLI x){
    if (x < 0)
        return 0; 
    if (x < base)
        return dp1[x];
    LLI high_digit = x / base;
    LLI low_digit = x % base;
    return dp2[high_digit - 1] + dp1[low_digit] + (low_digit + 1) * digit_sum (high_digit);
}

int main(){
    init(); 
    LLI a,b;
    while (cin >> a >> b && (a != -1)){
    //    cerr << calc_dp(a-1) << " " << calc_dp(b) << endl;
        cout << calc_dp(b) - calc_dp(a - 1) << endl;
    }
    return 0;
}
