#include <iostream>
#include <algorithm>
#include <vector>
#include <stdio.h>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <stack>
#include <queue>
#include <list>
#include <iomanip>
#include <cmath>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <string>
#include <utility>
#include <functional>

using namespace std;

typedef long long int LLI;
typedef vector<int> VI;
typedef vector<vector<int> > VVI;
typedef pair<int, int> PII;
typedef vector<pair<int, int> > VPI;
typedef vector<double> VD;
typedef vector<vector<double> > VVD;
typedef list<int> LI;

const int EPIS = 1e-7;
const int INF = 2000000000;

string s1;
string s2;
int dp[6101][6101];


int main(){
    int t;
    cin >> t;
    while (t--){
        cin >> s1;
        int n = s1.size();
        s2 = s1;
        reverse(s2.begin(), s2.end());
        for (int i = 0; i <= n; i++){
            dp[i][0] = dp[0][i] = i;
        }
        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= n; j++){
                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1;
                if (s1[i - 1] == s2[j - 1])
                    dp[i][j] = min(dp[i][j], dp[i-1][j-1]);
            }
        int changes = INF;
/*        for (int i = 0; i <= n; i++){
            for (int j = 0; j <= n; j++)
                cerr << dp[i][j] << " ";
            cerr << endl;
        } */
        for (int i = 0; i <= n; i++){
           // cerr << i << " " <<changes << endl;
            if (dp[i][n-i] < changes)
                changes = dp[i][n-i];
            if (i<n && dp[i][n-1-i] < changes)
                changes = dp[i][n-1-i];
        }
        cout << changes << endl;
    }
    return 0;
}
