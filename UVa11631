#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
#include <queue>
#include <map>
#include <vector>
#include <climits>
#include <utility>
#include <functional>

using namespace std;

typedef struct _node{
	int name;
	bool visisted;
	vector<int> adjList;
	vector<int> adjWeight;
}Node;

vector<Node *> nodes;
int main(){
	int n,m;
	cin >> n >> m;
	while (m && n){
		nodes.clear();
		typedef pair<int, int> P;
		priority_queue< P, vector<P>, greater<P> > pq;
		for (int i = 0; i < n; i++){
			Node * node = new Node();
			node->name = i;
			node->visisted = false;
			nodes.push_back(node);
		}
		int x,y,z;
		long long int total = 0;
		for (int i = 0; i < m; i++){
			cin >> x >> y >> z;
			nodes[x]->adjList.push_back(y);
			nodes[x]->adjWeight.push_back(z);
			nodes[y]->adjList.push_back(x);
			nodes[y]->adjWeight.push_back(z);
			total += z;
		}
		cin >> n >> m;
		pq.push(make_pair(0,0));
		Node * cur;
		long long int fee = 0;
		while (!pq.empty()){
			cur = nodes[pq.top().second];
			long long int curfee = pq.top().first;
			pq.pop();
			if (!cur->visisted){
				fee+=curfee;
				for (int i = 0; i < cur->adjList.size(); i++){
					int index = cur->adjList[i];
					int w = cur->adjWeight[i];
					if (!nodes[index]->visisted)
						pq.push(make_pair(w,index));
				}
					cur->visisted = true;
			}
			
		}
		//prim
		cout << total - fee << endl;
	}
	return 0;
}

